" vim-plug
call plug#begin('~/.config/nvim/plugged')

Plug 'gruvbox-community/gruvbox'
Plug 'dracula/vim',{'as':'dracula'}
Plug 'altercation/vim-colors-solarized'
Plug 'lifepillar/vim-solarized8'
Plug 'joshdick/onedark.vim'
Plug '~/.fzf'
Plug 'junegunn/fzf.vim'
"Plug 'scrooloose/nerdtree'
Plug 'kshenoy/vim-signature'
Plug 'majutsushi/tagbar'
"Plug 'junegunn/seoul256.vim'
"Plug 'junegunn/limelight.vim'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
"Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 't9md/vim-quickhl'
Plug 'sheerun/vim-polyglot'
Plug 'frazrepo/vim-rainbow'
Plug 'francoiscabrol/ranger.vim'
" this is dependency of ranger.vim
Plug 'rbgrouleff/bclose.vim'
Plug 'nvim-treesitter/nvim-treesitter'
Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }

call plug#end()

""""""""""""""""""""""""""""""""""""""""""""""""""""""
" settings for plug-ins
""""""""""""""""""""""""""""""""""""""""""""""""""""""
"let NERDTreeShowHidden = 1

" for fzf
" --column: Show column number
" --line-number: Show line number
" --no-heading: Do not show file headings in results
" --fixed-strings: Search term as a literal string
" --ignore-case: Case insensitive search
" --no-ignore: Do not respect .gitignore, etc...
" --hidden: Search hidden files and folders
" --follow: Follow symlinks
" --glob: Additional conditions for search (in this case ignore everything in the .git/ folder)
" --color: Search color options
"command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
"command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow -g "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
"command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --follow --glob "!.git/*" -g "!*.class" -g "!tags" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
"command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --follow --glob "!.git/*" -g "!*.class" -g "!tags" -g "!*.d" -g "!*.d.*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --follow --glob "!.git/*" --glob "!*.class" --glob "!tags" --glob "!GTAGS" --glob "!GPATH" --glob "!GRTAGS" --glob "!*.d" --glob "!*.d.*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
"let g:fzf_layout = { 'window': 'enew' }
let $FZF_DEFAULT_COMMAND='fd --type f --follow --exclude .git'

if has('nvim') || v:version >= 802
    let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.7 } }
    let g:fzf_preview_window = 'up:40%'
else
    let g:fzf_layout = {'down': '60%'}
    let g:fzf_preview_window = ''
endif

" rg
set grepprg=rg\ --vimgrep

" vim-airline
let g:airline#extensions#tabline#enabled = 1 " turn on buffer list
let g:airline_powerline_fonts = 1
set laststatus=2
let g:airline#extensions#tabline#fnamemod = ':t' " name only in tabline

" vim-rainbow
"let g:rainbow_active = 1

" don't use default mapping of ranger.vim
let g:ranger_map_keys = 0

" for treesitter
lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = "maintained", -- one of "all", "maintained" (parsers with maintainers), or a list of languages
  highlight = {
    enable = true,              -- false will disable the whole extension
  },
}
EOF

""""""""""""""""""""""""""""""""""""""""""""""""""""""
" key map and tags
""""""""""""""""""""""""""""""""""""""""""""""""""""""
" gtags
if filereadable("./GTAGS")
    echo "GTAGS file found"
    set cscopetag cscopeverbose
    set cscopeprg=gtags-cscope
	cs add ./GTAGS
	"nmap <F4> :Gtags <C-R>=expand("<cword>")<CR><CR>
	"nmap <F4> :Gtags -r <C-R>=expand("<cword>")<CR><CR>
	nmap <F5> :Gtags -r <C-R>=expand("<cword>")<CR><CR>
	"nmap <F6> :Gtags -s <C-R>=expand("<cword>")<CR><CR>
	nmap <F6> :BTags <CR>
	"nmap <F6> :Gtags -f %<CR>
	nmap <F7> :Tags <CR>
    let g:Gtags_No_Auto_Jump = 1
elseif filereadable("./tags")
    echo "tags file found"
    set tags=tags
    if filereadable("./cscope.out")
        echo "cscope.out file found"
        set csprg=/usr/local/bin/cscope
        set csto=0
        set nocsverb
        cs add ./cscope.out
        set csverb
    endif
    nmap <F4> :cs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <F5> :cs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <F6> :cs find t <C-R>=expand("<cword>")<CR><CR>
endif

nmap <F3> :Find <C-R>=expand("<cword>")<CR><CR>
"nmap <F8> :NERDTreeToggle<CR>
nmap <F9> :TagbarToggle<CR>
"nmap <F9> :bn<CR>

nmap <Leader>ff :Files<CR>
nmap <Leader>bb :Buffers<CR>
nmap <Leader>ll :Lines<CR>
nmap <Leader>lb :BLines<CR>
nmap <Leader>mm :Marks<CR>
"nmap <Leader>fc :Colors<CR>
nmap <Leader>rr :Ranger<CR>

nmap <Space>m <Plug>(quickhl-manual-this)
xmap <Space>m <Plug>(quickhl-manual-this)
nmap <F2> <Plug>(quickhl-manual-toggle)
xmap <F2> <Plug>(quickhl-manual-toggle)
nmap <Space>M <Plug>(quickhl-manual-reset)
xmap <Space>M <Plug>(quickhl-manual-reset)

""""""""""""""""""""""""""""""""""""""""""""""""""""""
" for LeaderF
""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:Lf_UseVersionControlTool = 0
" below two options for don't use cache
let g:Lf_UseCache = 0
let g:Lf_UseMemoryCache = 0
" enable popup
let g:Lf_WindowPosition = 'popup'
" preview enable
let g:Lf_PreviewInPopup = 1
" preview enable option
let g:Lf_PreviewResult = {
        \ 'File': 0,
        \ 'Buffer': 0,
        \ 'Mru': 0,
        \ 'Tag': 0,
        \ 'BufTag': 1,
        \ 'Function': 1,
        \ 'Line': 0,
        \ 'Colorscheme': 0,
        \ 'Rg': 0,
        \ 'Gtags': 1
        \}
" ignore
let g:Lf_WildIgnore = {
        \ 'dir': ['.svn','.git','.hg'],
        \ 'file': ['*.sw?','~$*','*.bak','*.exe','*.o','*.so','*.py[co]','*.d','*.o','*.class']
        \}
" if there are .git directories in subdirectories from project root, it makes
" hard to find global reference
let g:Lf_RootMarkers = ['.project', '.project2']
" disable auto generate, should use `Leaderf gtags --update` manually
let g:Lf_GtagsAutoGenerate = 0
" set gtags frontend
let g:Lf_Gtagslabel = 'native-pygments'
" store gtags output files in project root
let Lf_GtagsStoreInProject = 1
" rg filters
let g:Lf_RgConfig = [
        \ "--max-columns=150",
        \ "--glob=!build/*",
        \ "--glob=!*.class",
        \ "--glob=!*.d",
        \ "--glob=!git/*",
        \ "--hidden"
        \ ]
" set dev icons, but don't need (default is 1)
"let g:Lf_ShowDevIcons = 1
" this makes preview display abnormal
"set ambiwidth=double

" remove shortcut for file search
"noremap <Leader>ff :<C-U><C-R>=printf("Leaderf file --nameOnly %s", "")<CR><CR>
let g:Lf_ShortcutF = ""
" remove shortcut for buffer search
"noremap <Leader>fb :<C-U><C-R>=printf("Leaderf buffer %s", "")<CR><CR>
let g:Lf_ShortcutB = ""
" search tags in current buffer
"noremap <Leader>ft :<C-U><C-R>=printf("Leaderf bufTag %s", "")<CR><CR>
noremap <F6> :<C-U><C-R>=printf("Leaderf bufTag %s", "")<CR><CR>
" search text in current buffer 
"noremap <Leader>fl :<C-U><C-R>=printf("Leaderf line %s", "")<CR><CR>
" update gtags
noremap <Leader>fu :<C-U><C-R>=printf("Leaderf gtags --update")<CR><CR>
" search tags in all symbols of project
"noremap <Leader>fa :Leaderf gtags<CR>
noremap <F7> :Leaderf gtags<CR>
" search reference
"noremap <Leader>fr :<C-U><C-R>=printf("Leaderf gtags -r %s", expand("<cword>"))<CR><CR>
noremap <F5> :<C-U><C-R>=printf("Leaderf gtags -r %s", expand("<cword>"))<CR><CR>
" search definition
"noremap <Leader>fd :<C-U><C-R>=printf("Leaderf gtags -d %s", expand("<cword>"))<CR><CR>
" search tags by context
noremap <Leader>fd :<C-U><C-R>=printf("Leaderf gtags --by-context")<CR><CR>
" search text in project
"noremap <Leader>fg :<C-U><C-R>=printf("Leaderf rg -e %s ", expand("<cword>"))<CR><CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""
" settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax on
filetype on
set nocompatible
set encoding=utf-8
"set fileencodings=utf-8,cp949
set fileencodings=utf-8
set ruler
"set cindent
set smartindent
"set autoindent
" absolute number
"set nu
" absolute + relative number
set nu rnu
"set hlsearch
set nohlsearch
set incsearch
set ignorecase
set smartcase
set showmatch
set mouse=a
" paste option could disable indent
"set paste
set backspace=indent,eol,start
set wrap
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
"set noexpandtab
set nobackup
set noswapfile
set visualbell
set showcmd
"set list listchars=tab:▸\ ,trail:·,precedes:←,extends:→,eol:⏎
"set list listchars=tab:>>,trail:·,precedes:←,extends:→,eol:★
"set list listchars=tab:→\ ,trail:·,precedes:«,extends:»,eol:¶
"set list listchars=tab:→\ ,trail:·,precedes:«,extends:»,eol:★
"set cursorcolumn
set cursorline
set redrawtime=10000
set clipboard=unnamedplus,unnamed

""""""""""""""""""""""""""""""""""""""""""""""""""""""
" color scheme
""""""""""""""""""""""""""""""""""""""""""""""""""""""
" for seoul256 colorscheme
"let g:seoul256_background=233
"colorscheme seoul256
"set background=dark
"colorscheme solarized
"colorscheme gruvbox
"let g:gruvbox_gruvbox_italic = 1
set termguicolors
"set background=dark
"colorscheme solarized8
"colorscheme dracula
colorscheme onedark

set colorcolumn=100
"let &colorcolumn=join(range(101,999),",")

" for Alacritty
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

""""""""""""""""""""""""""""""""""""""""""""
"this is setting for SecureCRT color vim
"if $TERM =~ "linux" || $TERM =~ "ansi"
"            \ || $TERM == "xterm" || $TERM == "xterm-256color" || $TERM == "screen-256color"
"  set t_Co=256
"  set t_Sb=^[[4%dm
"  set t_Sf=^[[3%dm
"endif
""""""""""""""""""""""""""""""""""""""""""""

